const path = require("path");
const webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const UglifyJSPlugin = require("uglifyjs-webpack-plugin");

const production = true;
const mode = production ? "production" : "development";

const htmlPlugin = function(name, chunks) {
    return new HtmlWebpackPlugin({
        inject: true,
        chunks: chunks || undefined,
        filename: `${name}.html`,
        template: `./src/html/${name}.html`,
        hash: true,
        cache: true,
        // favicon: "./src/img/favicon.ico",
        showErrors: !production,
        minify: production && {
            caseSensitive: false,
            collapseBooleanAttributes: true,
            collapseInlineTagWhitespace: true,
            collapseWhitespace: true,
            conservativeCollapse: false,
            customAttrAssign: [],
            // customAttrCollapse: undefined,
            customAttrSurround: [],
            // customEventAttributes: [],
            decodeEntities: true,
            html5: true,
            ignoreCustomComments: [],
            ignoreCustomFragments: [],
            includeAutoGeneratedTags: true,
            keepClosingSlash: false,
            maxLineLength: Number.MAX_SAFE_INTEGER,
            minifyCSS: true,
            minifyJS: true,
            minifyURLs: true,
            preserveLineBreaks: false,
            preventAttributesEscaping: false,
            processConditionalComments: true,
            processScripts: [],
            quoteCharacter: "\"",
            removeAttributeQuotes: true,
            removeComments: true,
            removeEmptyAttributes: true,
            removeEmptyElements: false,
            removeOptionalTags: true,
            removeRedundantAttributes: true,
            removeScriptTypeAttributes: true,
            removeStyleLinkTypeAttributes: true,
            removeTagWhitespace: false,
            sortAttributes: true,
            sortClassName: true,
            trimCustomFragments: true,
            useShortDoctype: true,
        },
    });
};

const htmlPlugins = function(args) {
    return Object.entries(args).map(([name, chunks]) => htmlPlugin(name, chunks));
};

const documentPropertyNames = [
    "location",
    "implementation",
    "URL",
    "documentURI",
    "origin",
    "compatMode",
    "characterSet",
    "charset",
    "inputEncoding",
    "contentType",
    "doctype",
    "documentElement",
    "xmlEncoding",
    "xmlVersion",
    "xmlStandalone",
    "domain",
    "referrer",
    "cookie",
    "lastModified",
    "readyState",
    "title",
    "dir",
    "body",
    "head",
    "images",
    "embeds",
    "plugins",
    "links",
    "forms",
    "scripts",
    "currentScript",
    "defaultView",
    "designMode",
    "onreadystatechange",
    "anchors",
    "applets",
    "fgColor",
    "linkColor",
    "vlinkColor",
    "alinkColor",
    "bgColor",
    "all",
    "selectedStylesheetSet",
    "preferredStylesheetSet",
    "scrollingElement",
    "onpointerlockchange",
    "onpointerlockerror",
    "hidden",
    "visibilityState",
    "webkitVisibilityState",
    "webkitHidden",
    "onbeforecopy",
    "onbeforecut",
    "onbeforepaste",
    "oncopy",
    "oncut",
    "onpaste",
    "onsearch",
    "onselectionchange",
    "onselectstart",
    "onvisibilitychange",
    "fonts",
    "activeElement",
    "styleSheets",
    "pointerLockElement",
    "onabort",
    "onblur",
    "oncancel",
    "oncanplay",
    "oncanplaythrough",
    "onchange",
    "onclick",
    "onclose",
    "oncontextmenu",
    "oncuechange",
    "ondblclick",
    "ondrag",
    "ondragend",
    "ondragenter",
    "ondragleave",
    "ondragover",
    "ondragstart",
    "ondrop",
    "ondurationchange",
    "onemptied",
    "onended",
    "onerror",
    "onfocus",
    "oninput",
    "oninvalid",
    "onkeydown",
    "onkeypress",
    "onkeyup",
    "onload",
    "onloadeddata",
    "onloadedmetadata",
    "onloadstart",
    "onmousedown",
    "onmouseenter",
    "onmouseleave",
    "onmousemove",
    "onmouseout",
    "onmouseover",
    "onmouseup",
    "onmousewheel",
    "onpause",
    "onplay",
    "onplaying",
    "onprogress",
    "onratechange",
    "onreset",
    "onresize",
    "onscroll",
    "onseeked",
    "onseeking",
    "onselect",
    "onstalled",
    "onsubmit",
    "onsuspend",
    "ontimeupdate",
    "ontoggle",
    "onvolumechange",
    "onwaiting",
    "onwheel",
    "onauxclick",
    "ongotpointercapture",
    "onlostpointercapture",
    "onpointerdown",
    "onpointermove",
    "onpointerup",
    "onpointercancel",
    "onpointerover",
    "onpointerout",
    "onpointerenter",
    "onpointerleave",
    "children",
    "firstElementChild",
    "lastElementChild",
    "childElementCount",
    "webkitIsFullScreen",
    "webkitCurrentFullScreenElement",
    "webkitFullscreenEnabled",
    "webkitFullscreenElement",
    "onwebkitfullscreenchange",
    "onwebkitfullscreenerror",
    "rootElement",
    "getElementsByTagName",
    "getElementsByTagNameNS",
    "getElementsByClassName",
    "createDocumentFragment",
    "createTextNode",
    "createCDATASection",
    "createComment",
    "createProcessingInstruction",
    "importNode",
    "adoptNode",
    "createAttribute",
    "createAttributeNS",
    "createEvent",
    "createRange",
    "createNodeIterator",
    "createTreeWalker",
    "getElementsByName",
    "open",
    "close",
    "write",
    "writeln",
    "hasFocus",
    "execCommand",
    "queryCommandEnabled",
    "queryCommandIndeterm",
    "queryCommandState",
    "queryCommandSupported",
    "queryCommandValue",
    "clear",
    "captureEvents",
    "releaseEvents",
    "exitPointerLock",
    "registerElement",
    "createElement",
    "createElementNS",
    "caretRangeFromPoint",
    "getSelection",
    "elementFromPoint",
    "elementsFromPoint",
    "getElementById",
    "prepend",
    "append",
    "querySelector",
    "querySelectorAll",
    "webkitCancelFullScreen",
    "webkitExitFullscreen",
    "createExpression",
    "createNSResolver",
    "evaluate",
    "ontouchcancel",
    "ontouchend",
    "ontouchmove",
    "ontouchstart",
    "createTouch",
    "createTouchList",
    "moreStyleSheets",
    "onsecuritypolicyviolation",
    "policy",
    "onformdata",
    "fullscreenElement",
    "fullscreenEnabled",
    "onfullscreenchange",
    "onfullscreenerror",
    "wasDiscarded",
    "onfreeze",
    "onresume",
    "rootScroller",
    "timeline",
    "getAnimations",
    "exitFullscreen",
    "ELEMENT_NODE",
    "ATTRIBUTE_NODE",
    "TEXT_NODE",
    "CDATA_SECTION_NODE",
    "ENTITY_REFERENCE_NODE",
    "ENTITY_NODE",
    "PROCESSING_INSTRUCTION_NODE",
    "COMMENT_NODE",
    "DOCUMENT_NODE",
    "DOCUMENT_TYPE_NODE",
    "DOCUMENT_FRAGMENT_NODE",
    "NOTATION_NODE",
    "DOCUMENT_POSITION_DISCONNECTED",
    "DOCUMENT_POSITION_PRECEDING",
    "DOCUMENT_POSITION_FOLLOWING",
    "DOCUMENT_POSITION_CONTAINS",
    "DOCUMENT_POSITION_CONTAINED_BY",
    "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
    "nodeType",
    "nodeName",
    "baseURI",
    "isConnected",
    "ownerDocument",
    "parentNode",
    "parentElement",
    "childNodes",
    "firstChild",
    "lastChild",
    "previousSibling",
    "nextSibling",
    "nodeValue",
    "textContent",
    "hasChildNodes",
    "getRootNode",
    "normalize",
    "cloneNode",
    "isEqualNode",
    "isSameNode",
    "compareDocumentPosition",
    "contains",
    "lookupPrefix",
    "lookupNamespaceURI",
    "isDefaultNamespace",
    "insertBefore",
    "appendChild",
    "replaceChild",
    "removeChild",
    "addEventListener",
    "removeEventListener",
    "dispatchEvent",
];

const uglifyOptions = {
    ecma: 6,
    comments: false,
    compress: {
        arrows: true, // untyped
        // arguments: true,
        booleans: true,
        collapse_vars: true,
        comparisons: true,
        computed_props: true, // untyped
        conditionals: true,
        dead_code: true,
        drop_console: false,
        drop_debugger: true,
        evaluate: true,
        expression: false,
        global_defs: {},
        hoist_funs: false,
        hoist_props: true,
        hoist_vars: false,
        if_return: true,
        inline: true,
        join_vars: true,
        keep_classnames: false, // untyped
        keep_fargs: false,
        keep_fnames: false,
        keep_infinity: false,
        loops: true,
        negate_iife: true,
        passes: 3,
        properties: true,
        pure_funcs: [],
        pure_getters: "strict",
        reduce_funcs: true,
        reduce_vars: true,
        sequences: true,
        side_effects: true,
        switches: true,
        toplevel: true, // check
        top_retain: [],
        typeofs: true,
        // unsafe: true,
        unsafe_arrows: true, // untyped
        unsafe_comps: true,
        unsafe_Function: true,
        unsafe_math: true,
        unsafe_methods: true, // untyped
        unsafe_proto: true,
        unsafe_regexp: true,
        unsafe_undefined: true,
        unused: true,
        warnings: false,
    },
    keep_fnames: false,
    mangle: {
        eval: true,
        keep_classnames: false, // untyped
        keep_fnames: false,
        reserved: [],
        toplevel: true,
        safari10: false, // untyped
        properties: false && {
            builtins: false,
            debug: false,
            keep_quoted: false,
            regex: null,
            reserved: ["constructor"],
        },
    },
    sourceMap: true,
};

module.exports = {
    target: "web",
    entry: {
        Polybius: "./src/ts/polybius/Polybius.ts",
        PolybiusSandbox: "./src/ts/polybius/PolybiusSandbox.ts",
    },
    output: {
        filename: "[name].js",
        path: path.resolve(__dirname, "dist"),
    },
    resolve: {
        extensions: [".ts", ".tsx", ".js"],
    },
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                loader: "ts-loader",
            },
        ],
    },
    cache: true,
    optimization: {
        // splitChunks: {
        //     chunks: "all",
        // },
        minimize: production,
        minimizer: [
            new UglifyJSPlugin({
                uglifyOptions,
            }),
        ],
    },
    plugins: [
        ...htmlPlugins({
            popup: [],
            options: ["Polybius"],
            sandbox: ["PolybiusSandbox"],
        }),
    ],
    mode: mode,
};